def solution(n):
    return hanoi(n, 1, 3, [])

    # 하노이 함수의 1) 2) 3) 과정을 아래처럼 나눠서 볼 수 있음

    # n = 2 [1,2] / [1,3] / [2,3]

    # n = 3     [1,3][1,2][3,2]     / [1,3] /      [2,1][2,3][1,3]
    #       [1,3] / [1,2] / [3,2]               [2,1] / [2,3] / [1,3]

    # n = 4    [1,2][1,3][2,3][1,2][3,1][3,2][1,2]     / [1,3] /     [2,3][2,1][3,1][2,3][1,2][1,3][2,3]
    #       [1,2][1,3][2,3] / [1,2] / [3,1][3,2][1,2]             [2,3][2,1][3,1] / [2,3] / [1,2][1,3][2,3]
    #    [1,2] / [1,3] / [2,3]     [3,1] / [3,2] / [1,2]       [2,3] / [2,1] / [3,1]     [1,2] / [1,3] / [2,3]


def hanoi(n, start, end, history):
    if n == 0: return

    # 3개의 하노이 기둥에서 n개가 3번에 가려면 n-1개는 2번에 옮겨졌다가 3번으로 가야함
    # 1)은 n-1개가 2번으로 옮겨지는 과정
    #   - 1번에서 2번으로 옮기기 위한 과정이 재귀
    # 2)는 n이 3번으로 옮겨지는 과정
    # 3)은 n이 3번으로 옮겨졌으니 다시 2번에 있는 것들이 3번으로 옮겨지는 과정
    #   - 2번에서 3번으로 옮기기 위한 과정이 재귀
    # 6인 이유는 탑이 1,2,3 이기 때문 1+2+3 따라서 a:1 b:3면 나머지는 2번 탑으로

    hanoi(n - 1, start, 6 - (start + end), history)  # 1)
    history.append([start, end])  # 2)
    hanoi(n - 1, 6 - (start + end), end, history)  # 3)

    return history